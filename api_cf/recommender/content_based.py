# -*- coding: utf-8 -*-
"""content_based.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IbkjOpPHlVE0wXlPdGcWuBDa_RcTtcRP
"""

import pandas as pd
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity

def content_based_recommender(user_input, top_n=20):

  # # read data from database
  df_themes = pd.read_pickle("/Users/xiaotianhong/TAMU/2025spring/INF/project/recommend/api_cf/model_data/themes.pkl")
  df_games = pd.read_pickle("/Users/xiaotianhong/TAMU/2025spring/INF/project/recommend/api_cf/model_data/games.pkl")
  df_transform = pd.read_pickle("/Users/xiaotianhong/TAMU/2025spring/INF/project/recommend/api_cf/model_data/category_transform.pkl")

  cols_sum = df_themes.sum(axis=0, numeric_only=True)
  drop_cols = cols_sum[cols_sum <= 20].index
  df_themes.drop(columns=drop_cols, inplace=True)


  # transform the user input into user perference
  def category_transform(user_input):
    columns_list = df_transform.columns.tolist()
    columns_list = columns_list[1:]
    user_perference = np.array([0] * 107)
    for i in range(len(user_input)):
      if user_input[i] == True:
        temp = np.array(df_transform[columns_list[i]].tolist())
        user_perference = user_perference + temp

    return user_perference.tolist()

  # data preprocessing
  df_themes_data = df_themes.iloc[:,1:]
  user_perference = category_transform(user_input)
  avg_ratings = df_games.loc[:,"AvgRating"].to_list()



  # normalize the user_perference
  normalized_perference = [x/sum(user_perference) for x in user_perference]
  df_normalized = pd.DataFrame([normalized_perference])

  # calculate the similarity scores
  sim_scores = cosine_similarity(df_normalized, df_themes_data).tolist()[0]

  # append average ratings as tie-breaker
  sim_avg = [[sim_scores[i], avg_ratings[i]] for i in range(len(sim_scores))]

  # sorting
  sorted_sim_avg = sorted(enumerate(sim_avg), key=lambda i: i[1], reverse=True)

  # top n of games based on user perference
  ranked_games_ID = [x[0]+1 for x in sorted_sim_avg]

  return sorted_sim_avg[:top_n]